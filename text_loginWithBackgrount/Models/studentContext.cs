// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Class_system_Backstage_pj.Models;

public partial class studentContext : DbContext
{
    public studentContext(DbContextOptions<studentContext> options)
        : base(options)
    {
    }

    public virtual DbSet<TQuizQuiz> TQuizQuizzes { get; set; }

    public virtual DbSet<TQuizRecord> TQuizRecords { get; set; }

    public virtual DbSet<T公告分類> T公告分類s { get; set; }

    public virtual DbSet<T公告本體> T公告本體s { get; set; }

    public virtual DbSet<T工作儲存工作紀錄> T工作儲存工作紀錄s { get; set; }

    public virtual DbSet<T工作公司資料> T工作公司資料s { get; set; }

    public virtual DbSet<T工作履歷表工作經驗> T工作履歷表工作經驗s { get; set; }

    public virtual DbSet<T工作履歷資料> T工作履歷資料s { get; set; }

    public virtual DbSet<T工作工作經驗> T工作工作經驗s { get; set; }

    public virtual DbSet<T工作應徵工作紀錄> T工作應徵工作紀錄s { get; set; }

    public virtual DbSet<T工作推薦職缺> T工作推薦職缺s { get; set; }

    public virtual DbSet<T工作職缺資料> T工作職缺資料s { get; set; }

    public virtual DbSet<T影片CartDetail> T影片CartDetails { get; set; }

    public virtual DbSet<T影片Genre> T影片Genres { get; set; }

    public virtual DbSet<T影片Order> T影片Orders { get; set; }

    public virtual DbSet<T影片OrderDetail> T影片OrderDetails { get; set; }

    public virtual DbSet<T影片OrderStatus> T影片OrderStatuses { get; set; }

    public virtual DbSet<T影片ShoppingCart> T影片ShoppingCarts { get; set; }

    public virtual DbSet<T影片Video> T影片Videos { get; set; }

    public virtual DbSet<T影片問題單表> T影片問題單表s { get; set; }

    public virtual DbSet<T會員出勤> T會員出勤s { get; set; }

    public virtual DbSet<T會員學生> T會員學生s { get; set; }

    public virtual DbSet<T會員學生登入紀錄> T會員學生登入紀錄s { get; set; }

    public virtual DbSet<T會員老師> T會員老師s { get; set; }

    public virtual DbSet<T會員老師登入紀錄> T會員老師登入紀錄s { get; set; }

    public virtual DbSet<T訂餐口味總表> T訂餐口味總表s { get; set; }

    public virtual DbSet<T訂餐學員口味表> T訂餐學員口味表s { get; set; }

    public virtual DbSet<T訂餐學員最愛商家表> T訂餐學員最愛商家表s { get; set; }

    public virtual DbSet<T訂餐店家資料表> T訂餐店家資料表s { get; set; }

    public virtual DbSet<T訂餐店家風味表> T訂餐店家風味表s { get; set; }

    public virtual DbSet<T訂餐營業時間表> T訂餐營業時間表s { get; set; }

    public virtual DbSet<T訂餐訂單詳細資訊表> T訂餐訂單詳細資訊表s { get; set; }

    public virtual DbSet<T訂餐訂單資訊表> T訂餐訂單資訊表s { get; set; }

    public virtual DbSet<T訂餐評論表> T訂餐評論表s { get; set; }

    public virtual DbSet<T訂餐購物車> T訂餐購物車s { get; set; }

    public virtual DbSet<T訂餐餐點資訊表> T訂餐餐點資訊表s { get; set; }

    public virtual DbSet<T討論子版> T討論子版s { get; set; }

    public virtual DbSet<T討論文章> T討論文章s { get; set; }

    public virtual DbSet<T討論文章點讚> T討論文章點讚s { get; set; }

    public virtual DbSet<T討論留言> T討論留言s { get; set; }

    public virtual DbSet<T討論留言點讚> T討論留言點讚s { get; set; }

    public virtual DbSet<T討論看板> T討論看板s { get; set; }

    public virtual DbSet<T課程學生班級> T課程學生班級s { get; set; }

    public virtual DbSet<T課程班級> T課程班級s { get; set; }

    public virtual DbSet<T課程班級科目> T課程班級科目s { get; set; }

    public virtual DbSet<T課程科目> T課程科目s { get; set; }

    public virtual DbSet<T課程科目分類> T課程科目分類s { get; set; }

    public virtual DbSet<T課程老師科目> T課程老師科目s { get; set; }

    public virtual DbSet<T課程評分> T課程評分s { get; set; }

    public virtual DbSet<T課程評分主表> T課程評分主表s { get; set; }

    public virtual DbSet<T課程課程> T課程課程s { get; set; }

    public virtual DbSet<T課程通知表> T課程通知表s { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<TQuizQuiz>(entity =>
        {
            entity.HasKey(e => e.FQuizId).HasName("PK_tQuiz_quiz");

            entity.ToTable("tQuiz_Quiz");

            entity.Property(e => e.FQuizId).HasColumnName("fQuizId");
            entity.Property(e => e.FClosed).HasColumnName("fClosed");
            entity.Property(e => e.FCreateTime)
                .HasColumnType("datetime")
                .HasColumnName("fCreateTime");
            entity.Property(e => e.FLimitTime).HasColumnName("fLimitTime");
            entity.Property(e => e.FNote).HasColumnName("fNote");
            entity.Property(e => e.FPublic).HasColumnName("fPublic");
            entity.Property(e => e.FQcode)
                .HasMaxLength(6)
                .HasColumnName("fQCode");
            entity.Property(e => e.FQname)
                .HasMaxLength(50)
                .HasColumnName("fQName");
            entity.Property(e => e.FTeacherId).HasColumnName("fTeacherId");

            entity.HasOne(d => d.FTeacher).WithMany(p => p.TQuizQuizzes)
                .HasForeignKey(d => d.FTeacherId)
                .HasConstraintName("FK_tQuiz_quiz_t會員_老師");
        });

        modelBuilder.Entity<TQuizRecord>(entity =>
        {
            entity.HasKey(e => e.FRecordId);

            entity.ToTable("tQuiz_Record");

            entity.Property(e => e.FRecordId).HasColumnName("fRecordId");
            entity.Property(e => e.FEndTime)
                .HasColumnType("datetime")
                .HasColumnName("fEndTime");
            entity.Property(e => e.FGroup)
                .HasMaxLength(8)
                .HasColumnName("fGroup");
            entity.Property(e => e.FQuizId).HasColumnName("fQuizId");
            entity.Property(e => e.FRate)
                .HasColumnType("decimal(3, 2)")
                .HasColumnName("fRate");
            entity.Property(e => e.FStartTime)
                .HasColumnType("datetime")
                .HasColumnName("fStartTime");
            entity.Property(e => e.FState).HasColumnName("fState");
            entity.Property(e => e.FStudentId).HasColumnName("fStudentId");
            entity.Property(e => e.FSumbitTime)
                .HasColumnType("datetime")
                .HasColumnName("fSumbitTime");

            entity.HasOne(d => d.FQuiz).WithMany(p => p.TQuizRecords)
                .HasForeignKey(d => d.FQuizId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tQuiz_Record_tQuiz_quiz");

            entity.HasOne(d => d.FStudent).WithMany(p => p.TQuizRecords)
                .HasForeignKey(d => d.FStudentId)
                .HasConstraintName("FK_tQuiz_Record_t會員_學生");
        });

        modelBuilder.Entity<T公告分類>(entity =>
        {
            entity.HasKey(e => e.分類id).HasName("PK_t分類");

            entity.ToTable("t公告_分類");

            entity.Property(e => e.分類id).HasColumnName("分類ID");
            entity.Property(e => e.名稱).HasMaxLength(10);
        });

        modelBuilder.Entity<T公告本體>(entity =>
        {
            entity.HasKey(e => e.公告id).HasName("PK_t公告");

            entity.ToTable("t公告_本體");

            entity.Property(e => e.公告id).HasColumnName("公告ID");
            entity.Property(e => e.內容).HasMaxLength(200);
            entity.Property(e => e.分類id).HasColumnName("分類ID");
            entity.Property(e => e.時間).HasColumnType("datetime");
            entity.Property(e => e.標題).HasMaxLength(20);
            entity.Property(e => e.老師id).HasColumnName("老師ID");
            entity.Property(e => e.重要程度)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();

            entity.HasOne(d => d.分類).WithMany(p => p.T公告本體s)
                .HasForeignKey(d => d.分類id)
                .HasConstraintName("FK_t公告_本體_t公告_分類");

            entity.HasOne(d => d.老師).WithMany(p => p.T公告本體s)
                .HasForeignKey(d => d.老師id)
                .HasConstraintName("FK_t公告_本體_t會員_老師");
        });

        modelBuilder.Entity<T工作儲存工作紀錄>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK_tJobStorage");

            entity.ToTable("t工作_儲存工作紀錄");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.F儲存時間)
                .HasColumnType("datetime")
                .HasColumnName("f儲存時間");
            entity.Property(e => e.F學員Id).HasColumnName("f學員ID");
            entity.Property(e => e.F職缺Id).HasColumnName("f職缺ID");

            entity.HasOne(d => d.F學員).WithMany(p => p.T工作儲存工作紀錄s)
                .HasForeignKey(d => d.F學員Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t工作_儲存工作紀錄_t會員_學生");

            entity.HasOne(d => d.F職缺).WithMany(p => p.T工作儲存工作紀錄s)
                .HasForeignKey(d => d.F職缺Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t工作_儲存工作紀錄_t工作_職缺資料");
        });

        modelBuilder.Entity<T工作公司資料>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK_tCompany");

            entity.ToTable("t工作_公司資料");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.F公司名稱)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("f公司名稱");
            entity.Property(e => e.F公司地址)
                .HasMaxLength(50)
                .HasColumnName("f公司地址");
            entity.Property(e => e.F公司簡介).HasColumnName("f公司簡介");
            entity.Property(e => e.F公司電話)
                .HasMaxLength(50)
                .HasColumnName("f公司電話");
            entity.Property(e => e.F刪除狀態)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f刪除狀態");
            entity.Property(e => e.F密碼)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("f密碼");
            entity.Property(e => e.F審核通過時間)
                .HasColumnType("datetime")
                .HasColumnName("f審核通過時間");
            entity.Property(e => e.F帳號)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("f帳號");
            entity.Property(e => e.F帳號狀態)
                .IsRequired()
                .HasMaxLength(10)
                .HasDefaultValueSql("('???')")
                .HasColumnName("f帳號狀態");
            entity.Property(e => e.F最後更新時間)
                .HasColumnType("datetime")
                .HasColumnName("f最後更新時間");
            entity.Property(e => e.F統一編號)
                .IsRequired()
                .HasMaxLength(8)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f統一編號");
            entity.Property(e => e.F聯絡人)
                .HasMaxLength(50)
                .HasColumnName("f聯絡人");
            entity.Property(e => e.F聯絡人Email)
                .HasMaxLength(50)
                .HasColumnName("f聯絡人Email");
            entity.Property(e => e.F聯絡人電話)
                .HasMaxLength(50)
                .HasColumnName("f聯絡人電話");
            entity.Property(e => e.F註冊時間)
                .HasColumnType("datetime")
                .HasColumnName("f註冊時間");
            entity.Property(e => e.F負責人)
                .HasMaxLength(50)
                .HasColumnName("f負責人");
        });

        modelBuilder.Entity<T工作履歷表工作經驗>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK_tResumeWorkExperiences");

            entity.ToTable("t工作_履歷表工作經驗");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.F履歷Id).HasColumnName("f履歷ID");
            entity.Property(e => e.F工作經驗Id).HasColumnName("f工作經驗ID");

            entity.HasOne(d => d.F履歷).WithMany(p => p.T工作履歷表工作經驗s)
                .HasForeignKey(d => d.F履歷Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tResumeWorkExperiences_tResume");

            entity.HasOne(d => d.F工作經驗).WithMany(p => p.T工作履歷表工作經驗s)
                .HasForeignKey(d => d.F工作經驗Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tResumeWorkExperiences_tWorkExperiences");
        });

        modelBuilder.Entity<T工作履歷資料>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK_Table_1");

            entity.ToTable("t工作_履歷資料");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.F刪除或關閉原因)
                .HasMaxLength(30)
                .HasColumnName("f刪除或關閉原因");
            entity.Property(e => e.F刪除狀態)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f刪除狀態");
            entity.Property(e => e.F學員Id).HasColumnName("f學員ID");
            entity.Property(e => e.F專長技能).HasColumnName("f專長技能");
            entity.Property(e => e.F履歷名稱)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("f履歷名稱");
            entity.Property(e => e.F履歷狀態)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("f履歷狀態");
            entity.Property(e => e.F工作性質)
                .HasMaxLength(10)
                .HasColumnName("f工作性質");
            entity.Property(e => e.F工作時段)
                .HasMaxLength(30)
                .HasColumnName("f工作時段");
            entity.Property(e => e.F希望工作地點)
                .HasMaxLength(50)
                .HasColumnName("f希望工作地點");
            entity.Property(e => e.F希望職稱)
                .HasMaxLength(30)
                .HasColumnName("f希望職稱");
            entity.Property(e => e.F希望薪水待遇)
                .HasMaxLength(15)
                .HasColumnName("f希望薪水待遇");
            entity.Property(e => e.F建立時間)
                .HasColumnType("datetime")
                .HasColumnName("f建立時間");
            entity.Property(e => e.F最後更新時間)
                .HasColumnType("datetime")
                .HasColumnName("f最後更新時間");
            entity.Property(e => e.F有無工作經驗)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f有無工作經驗");
            entity.Property(e => e.F自傳).HasColumnName("f自傳");
            entity.Property(e => e.F語文能力).HasColumnName("f語文能力");
            entity.Property(e => e.F配合輪班)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f配合輪班");
            entity.Property(e => e.F關鍵字).HasColumnName("f關鍵字");

            entity.HasOne(d => d.F學員).WithMany(p => p.T工作履歷資料s)
                .HasForeignKey(d => d.F學員Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t工作_履歷資料_t會員_學生");
        });

        modelBuilder.Entity<T工作工作經驗>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK_tWorkExperiences");

            entity.ToTable("t工作_工作經驗");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.F公司名稱)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("f公司名稱");
            entity.Property(e => e.F學員Id).HasColumnName("f學員ID");
            entity.Property(e => e.F工作內容)
                .IsRequired()
                .HasColumnName("f工作內容");
            entity.Property(e => e.F結束年月)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f結束年月");
            entity.Property(e => e.F職務名稱)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("f職務名稱");
            entity.Property(e => e.F薪水待遇)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("f薪水待遇");
            entity.Property(e => e.F起始年月)
                .IsRequired()
                .HasMaxLength(7)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f起始年月");

            entity.HasOne(d => d.F學員).WithMany(p => p.T工作工作經驗s)
                .HasForeignKey(d => d.F學員Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t工作_工作經驗_t會員_學生");
        });

        modelBuilder.Entity<T工作應徵工作紀錄>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK_tJobApply");

            entity.ToTable("t工作_應徵工作紀錄");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.F刪除狀態)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f刪除狀態");
            entity.Property(e => e.F學員Id).HasColumnName("f學員ID");
            entity.Property(e => e.F應徵信內容)
                .IsRequired()
                .HasColumnName("f應徵信內容");
            entity.Property(e => e.F應徵時間)
                .HasColumnType("datetime")
                .HasColumnName("f應徵時間");
            entity.Property(e => e.F職缺Id).HasColumnName("f職缺ID");

            entity.HasOne(d => d.F學員).WithMany(p => p.T工作應徵工作紀錄s)
                .HasForeignKey(d => d.F學員Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t工作_應徵工作紀錄_t會員_學生");

            entity.HasOne(d => d.F職缺).WithMany(p => p.T工作應徵工作紀錄s)
                .HasForeignKey(d => d.F職缺Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t工作_應徵工作紀錄_t工作_職缺資料1");
        });

        modelBuilder.Entity<T工作推薦職缺>(entity =>
        {
            entity.HasKey(e => e.FId);

            entity.ToTable("t工作_推薦職缺");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.F學員Id).HasColumnName("f學員ID");
            entity.Property(e => e.F推薦程度)
                .HasMaxLength(10)
                .HasColumnName("f推薦程度");
            entity.Property(e => e.F職缺Id).HasColumnName("f職缺ID");

            entity.HasOne(d => d.F學員).WithMany(p => p.T工作推薦職缺s)
                .HasForeignKey(d => d.F學員Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t工作_推薦職缺_t會員_學生");

            entity.HasOne(d => d.F職缺).WithMany(p => p.T工作推薦職缺s)
                .HasForeignKey(d => d.F職缺Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t工作_推薦職缺_t工作_職缺資料");
        });

        modelBuilder.Entity<T工作職缺資料>(entity =>
        {
            entity.HasKey(e => e.FId).HasName("PK_tJobs_1");

            entity.ToTable("t工作_職缺資料");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.F公司Id).HasColumnName("f公司ID");
            entity.Property(e => e.F其他條件).HasColumnName("f其他條件");
            entity.Property(e => e.F刪除或關閉原因)
                .HasMaxLength(30)
                .HasColumnName("f刪除或關閉原因");
            entity.Property(e => e.F刪除狀態)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f刪除狀態");
            entity.Property(e => e.F學歷要求)
                .HasMaxLength(10)
                .HasColumnName("f學歷要求");
            entity.Property(e => e.F工作內容).HasColumnName("f工作內容");
            entity.Property(e => e.F工作地點)
                .HasMaxLength(50)
                .HasColumnName("f工作地點");
            entity.Property(e => e.F工作性質)
                .HasMaxLength(10)
                .HasColumnName("f工作性質");
            entity.Property(e => e.F工作技能).HasColumnName("f工作技能");
            entity.Property(e => e.F工作時段)
                .HasMaxLength(10)
                .HasColumnName("f工作時段");
            entity.Property(e => e.F建立時間)
                .HasColumnType("datetime")
                .HasColumnName("f建立時間");
            entity.Property(e => e.F最後更新時間)
                .HasColumnType("datetime")
                .HasColumnName("f最後更新時間");
            entity.Property(e => e.F職務名稱)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("f職務名稱");
            entity.Property(e => e.F職缺狀態)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("f職缺狀態");
            entity.Property(e => e.F薪水待遇)
                .HasMaxLength(50)
                .HasColumnName("f薪水待遇");
            entity.Property(e => e.F語文條件).HasColumnName("f語文條件");
            entity.Property(e => e.F輪班需求)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("f輪班需求");
            entity.Property(e => e.F關鍵字).HasColumnName("f關鍵字");
            entity.Property(e => e.F需求人數)
                .HasMaxLength(10)
                .HasColumnName("f需求人數");

            entity.HasOne(d => d.F公司).WithMany(p => p.T工作職缺資料s)
                .HasForeignKey(d => d.F公司Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_tJobs_tCompany");
        });

        modelBuilder.Entity<T影片CartDetail>(entity =>
        {
            entity.ToTable("t影片_CartDetail");

            entity.Property(e => e.FVideoId).HasColumnName("fVideoId");

            entity.HasOne(d => d.FVideo).WithMany(p => p.T影片CartDetails)
                .HasForeignKey(d => d.FVideoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t影片_CartDetail_t影片_Video");

            entity.HasOne(d => d.ShoppingCart).WithMany(p => p.T影片CartDetails)
                .HasForeignKey(d => d.ShoppingCartId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t影片_CartDetail_t影片_ShoppingCart");
        });

        modelBuilder.Entity<T影片Genre>(entity =>
        {
            entity.ToTable("t影片_Genre");

            entity.Property(e => e.GenreName).HasMaxLength(50);
        });

        modelBuilder.Entity<T影片Order>(entity =>
        {
            entity.HasKey(e => e.FOrderId);

            entity.ToTable("t影片_Order");

            entity.Property(e => e.FOrderId).HasColumnName("fOrderId");
            entity.Property(e => e.FOrderOrderStatusId).HasColumnName("fOrder_OrderStatusId");
            entity.Property(e => e.FStudentId).HasColumnName("fStudentId");

            entity.HasOne(d => d.FOrderOrderStatus).WithMany(p => p.T影片Orders)
                .HasForeignKey(d => d.FOrderOrderStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t影片_Order_t影片_OrderStatus");

            entity.HasOne(d => d.FStudent).WithMany(p => p.T影片Orders)
                .HasForeignKey(d => d.FStudentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t影片_Order_t會員_學生");
        });

        modelBuilder.Entity<T影片OrderDetail>(entity =>
        {
            entity.HasKey(e => e.FSeqNo);

            entity.ToTable("t影片_OrderDEtail");

            entity.Property(e => e.FSeqNo).HasColumnName("fSeqNO");
            entity.Property(e => e.FOrderId).HasColumnName("fOrderId");
            entity.Property(e => e.FQuantity).HasColumnName("fQuantity");
            entity.Property(e => e.FUnitPrice).HasColumnName("fUnitPrice");
            entity.Property(e => e.FVideoId).HasColumnName("fVideoId");

            entity.HasOne(d => d.FOrder).WithMany(p => p.T影片OrderDetails)
                .HasForeignKey(d => d.FOrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t影片_OrderDEtail_t影片_Order2");

            entity.HasOne(d => d.FVideo).WithMany(p => p.T影片OrderDetails)
                .HasForeignKey(d => d.FVideoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t影片_OrderDEtail_t影片_Video1");
        });

        modelBuilder.Entity<T影片OrderStatus>(entity =>
        {
            entity.ToTable("t影片_OrderStatus");

            entity.Property(e => e.StatusName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<T影片ShoppingCart>(entity =>
        {
            entity.ToTable("t影片_ShoppingCart");

            entity.Property(e => e.FStudentId).HasColumnName("fStudentId");

            entity.HasOne(d => d.FStudent).WithMany(p => p.T影片ShoppingCarts)
                .HasForeignKey(d => d.FStudentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t影片_ShoppingCart_t會員_學生");
        });

        modelBuilder.Entity<T影片Video>(entity =>
        {
            entity.HasKey(e => e.FVideoId).HasName("PK_tVideo");

            entity.ToTable("t影片_Video");

            entity.Property(e => e.FVideoId).HasColumnName("fVideoId");
            entity.Property(e => e.FPrice)
                .HasColumnType("money")
                .HasColumnName("fPrice");
            entity.Property(e => e.FUrl)
                .IsRequired()
                .HasMaxLength(500)
                .HasColumnName("fURL");
            entity.Property(e => e.FVideoName)
                .HasMaxLength(100)
                .HasColumnName("fVideoName");
            entity.Property(e => e.FVideoTitle)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fVideoTitle");
            entity.Property(e => e.科目id).HasColumnName("科目ID");

            entity.HasOne(d => d.Genre).WithMany(p => p.T影片Videos)
                .HasForeignKey(d => d.GenreId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t影片_Video_t影片_Genre");

            entity.HasOne(d => d.科目).WithMany(p => p.T影片Videos)
                .HasForeignKey(d => d.科目id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t影片_Video_t課程_科目");
        });

        modelBuilder.Entity<T影片問題單表>(entity =>
        {
            entity.HasKey(e => e.FId);

            entity.ToTable("t影片_問題單表");

            entity.Property(e => e.FId).HasColumnName("fId");
            entity.Property(e => e.FDate)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("fDate");
            entity.Property(e => e.FParentId).HasColumnName("fParentId");
            entity.Property(e => e.FProgress)
                .HasMaxLength(200)
                .IsFixedLength()
                .HasColumnName("fProgress");
            entity.Property(e => e.FSeqNo).HasColumnName("fSeqNO");
            entity.Property(e => e.FStudentId).HasColumnName("fStudentId");
            entity.Property(e => e.FSubject)
                .HasMaxLength(500)
                .HasColumnName("fSubject");
            entity.Property(e => e.FTeacherId).HasColumnName("fTeacherId");
            entity.Property(e => e.FType)
                .HasMaxLength(50)
                .HasColumnName("fType");

            entity.HasOne(d => d.FSeqNoNavigation).WithMany(p => p.T影片問題單表s)
                .HasForeignKey(d => d.FSeqNo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t影片_問題單表_t影片_OrderDEtail");

            entity.HasOne(d => d.FStudent).WithMany(p => p.T影片問題單表s)
                .HasForeignKey(d => d.FStudentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t影片_問題單表_t會員_學生");

            entity.HasOne(d => d.FTeacher).WithMany(p => p.T影片問題單表s)
                .HasForeignKey(d => d.FTeacherId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t影片_問題單表_t會員_老師");
        });

        modelBuilder.Entity<T會員出勤>(entity =>
        {
            entity.HasKey(e => e.出勤id);

            entity.ToTable("t會員_出勤");

            entity.Property(e => e.出勤id).HasColumnName("出勤ID");
            entity.Property(e => e.學生id).HasColumnName("學生ID");
            entity.Property(e => e.狀態).HasMaxLength(50);
            entity.Property(e => e.班級id).HasColumnName("班級ID");
            entity.Property(e => e.簽到時間).HasColumnType("datetime");

            entity.HasOne(d => d.學生).WithMany(p => p.T會員出勤s)
                .HasForeignKey(d => d.學生id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t會員_出勤_t會員_學生1");

            entity.HasOne(d => d.班級).WithMany(p => p.T會員出勤s)
                .HasForeignKey(d => d.班級id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t會員_出勤_t課程_班級");
        });

        modelBuilder.Entity<T會員學生>(entity =>
        {
            entity.HasKey(e => e.學生id).HasName("PK_學生");

            entity.ToTable("t會員_學生");

            entity.Property(e => e.學生id).HasColumnName("學生ID");
            entity.Property(e => e.Salt)
                .HasMaxLength(50)
                .HasColumnName("salt");
            entity.Property(e => e.Token)
                .HasMaxLength(50)
                .HasColumnName("token");
            entity.Property(e => e.信箱)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.修改日期).HasColumnType("datetime");
            entity.Property(e => e.其他登入).HasMaxLength(50);
            entity.Property(e => e.地址).HasMaxLength(50);
            entity.Property(e => e.姓名)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.學位).HasMaxLength(50);
            entity.Property(e => e.學校).HasMaxLength(50);
            entity.Property(e => e.密碼).HasMaxLength(50);
            entity.Property(e => e.性別).HasMaxLength(50);
            entity.Property(e => e.手機).HasMaxLength(50);
            entity.Property(e => e.狀態)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .IsFixedLength();
            entity.Property(e => e.生日).HasColumnType("datetime");
            entity.Property(e => e.畢肄).HasMaxLength(50);
            entity.Property(e => e.科系).HasMaxLength(50);
            entity.Property(e => e.註冊日期).HasColumnType("datetime");
            entity.Property(e => e.身分證字號).HasMaxLength(50);
            entity.Property(e => e.鎖定)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .IsFixedLength();
        });

        modelBuilder.Entity<T會員學生登入紀錄>(entity =>
        {
            entity.HasKey(e => e.學生登入紀錄id);

            entity.ToTable("t會員_學生登入紀錄");

            entity.Property(e => e.學生登入紀錄id).HasColumnName("學生登入紀錄ID");
            entity.Property(e => e.學生id).HasColumnName("學生ID");
            entity.Property(e => e.狀態)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.登入時間).HasColumnType("datetime");

            entity.HasOne(d => d.學生).WithMany(p => p.T會員學生登入紀錄s)
                .HasForeignKey(d => d.學生id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t會員_學生登入紀錄_t會員_學生1");
        });

        modelBuilder.Entity<T會員老師>(entity =>
        {
            entity.HasKey(e => e.老師id).HasName("PK_老師");

            entity.ToTable("t會員_老師");

            entity.Property(e => e.老師id).HasColumnName("老師ID");
            entity.Property(e => e.Salt)
                .HasMaxLength(50)
                .HasColumnName("salt");
            entity.Property(e => e.Token)
                .HasMaxLength(50)
                .HasColumnName("token");
            entity.Property(e => e.信箱)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.修改日期).HasColumnType("datetime");
            entity.Property(e => e.其他登入).HasMaxLength(50);
            entity.Property(e => e.地址).HasMaxLength(50);
            entity.Property(e => e.姓名)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.學位).HasMaxLength(50);
            entity.Property(e => e.學校).HasMaxLength(50);
            entity.Property(e => e.密碼).HasMaxLength(50);
            entity.Property(e => e.性別).HasMaxLength(50);
            entity.Property(e => e.手機).HasMaxLength(50);
            entity.Property(e => e.狀態)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("('0')")
                .IsFixedLength();
            entity.Property(e => e.生日).HasColumnType("datetime");
            entity.Property(e => e.畢肄).HasMaxLength(50);
            entity.Property(e => e.科系).HasMaxLength(50);
            entity.Property(e => e.註冊日期).HasColumnType("datetime");
            entity.Property(e => e.身分證字號).HasMaxLength(50);
            entity.Property(e => e.鎖定)
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
        });

        modelBuilder.Entity<T會員老師登入紀錄>(entity =>
        {
            entity.HasKey(e => e.老師登入紀錄id);

            entity.ToTable("t會員_老師登入紀錄");

            entity.Property(e => e.老師登入紀錄id).HasColumnName("老師登入紀錄ID");
            entity.Property(e => e.狀態)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.登入時間).HasColumnType("datetime");
            entity.Property(e => e.老師id).HasColumnName("老師ID");

            entity.HasOne(d => d.老師).WithMany(p => p.T會員老師登入紀錄s)
                .HasForeignKey(d => d.老師id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t會員_老師登入紀錄_t會員_老師1");
        });

        modelBuilder.Entity<T訂餐口味總表>(entity =>
        {
            entity.HasKey(e => e.口味id);

            entity.ToTable("t訂餐_口味總表");

            entity.Property(e => e.口味id).HasColumnName("口味ID");
            entity.Property(e => e.風味名稱)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<T訂餐學員口味表>(entity =>
        {
            entity.HasKey(e => e.識別碼id);

            entity.ToTable("t訂餐_學員口味表");

            entity.Property(e => e.識別碼id).HasColumnName("識別碼ID");
            entity.Property(e => e.口味id).HasColumnName("口味ID");
            entity.Property(e => e.學員id).HasColumnName("學員ID");

            entity.HasOne(d => d.口味).WithMany(p => p.T訂餐學員口味表s)
                .HasForeignKey(d => d.口味id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t訂餐_學員口味表_t訂餐_口味總表1");

            entity.HasOne(d => d.學員).WithMany(p => p.T訂餐學員口味表s)
                .HasForeignKey(d => d.學員id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t訂餐_學員口味表_t會員_學生");
        });

        modelBuilder.Entity<T訂餐學員最愛商家表>(entity =>
        {
            entity.HasKey(e => e.識別碼id);

            entity.ToTable("t訂餐_學員最愛商家表");

            entity.Property(e => e.識別碼id).HasColumnName("識別碼ID");
            entity.Property(e => e.學員id).HasColumnName("學員ID");
            entity.Property(e => e.店家id).HasColumnName("店家ID");

            entity.HasOne(d => d.學員).WithMany(p => p.T訂餐學員最愛商家表s)
                .HasForeignKey(d => d.學員id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t訂餐_學員最愛商家表_t會員_學生");

            entity.HasOne(d => d.店家).WithMany(p => p.T訂餐學員最愛商家表s)
                .HasForeignKey(d => d.店家id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t訂餐_學員最愛商家表_t訂餐_店家資料表");
        });

        modelBuilder.Entity<T訂餐店家資料表>(entity =>
        {
            entity.HasKey(e => e.店家id);

            entity.ToTable("t訂餐_店家資料表");

            entity.Property(e => e.店家id).HasColumnName("店家ID");
            entity.Property(e => e.地址)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.密碼)
                .IsRequired()
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.店家名稱)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.電子信箱)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.電話)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.餐廳介紹).IsRequired();
        });

        modelBuilder.Entity<T訂餐店家風味表>(entity =>
        {
            entity.HasKey(e => e.識別碼id);

            entity.ToTable("t訂餐_店家風味表");

            entity.Property(e => e.識別碼id).HasColumnName("識別碼ID");
            entity.Property(e => e.口味id).HasColumnName("口味ID");
            entity.Property(e => e.店家id).HasColumnName("店家ID");

            entity.HasOne(d => d.口味).WithMany(p => p.T訂餐店家風味表s)
                .HasForeignKey(d => d.口味id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t訂餐_店家風味表_t訂餐_口味總表1");

            entity.HasOne(d => d.店家).WithMany(p => p.T訂餐店家風味表s)
                .HasForeignKey(d => d.店家id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t訂餐_店家風味表_t訂餐_店家資料表");
        });

        modelBuilder.Entity<T訂餐營業時間表>(entity =>
        {
            entity.HasKey(e => e.營業時間表id);

            entity.ToTable("t訂餐_營業時間表");

            entity.Property(e => e.營業時間表id).HasColumnName("營業時間表ID");
            entity.Property(e => e.店家id).HasColumnName("店家ID");
            entity.Property(e => e.星期).HasMaxLength(50);
            entity.Property(e => e.時段早中晚全)
                .HasMaxLength(50)
                .HasColumnName("時段(早/中/晚/全)");
            entity.Property(e => e.結束營業時間)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.開始營業時間)
                .HasMaxLength(10)
                .IsUnicode(false);
            entity.Property(e => e.顯示)
                .HasMaxLength(10)
                .IsFixedLength();

            entity.HasOne(d => d.店家).WithMany(p => p.T訂餐營業時間表s)
                .HasForeignKey(d => d.店家id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t訂餐_營業時間表_t訂餐_店家資料表");
        });

        modelBuilder.Entity<T訂餐訂單詳細資訊表>(entity =>
        {
            entity.HasKey(e => e.訂單詳細表id);

            entity.ToTable("t訂餐_訂單詳細資訊表");

            entity.Property(e => e.訂單詳細表id).HasColumnName("訂單詳細表ID");
            entity.Property(e => e.店家id).HasColumnName("店家ID");
            entity.Property(e => e.狀態)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.訂單id).HasColumnName("訂單ID");
            entity.Property(e => e.金額小記).HasColumnType("money");
            entity.Property(e => e.餐點id).HasColumnName("餐點ID");

            entity.HasOne(d => d.店家).WithMany(p => p.T訂餐訂單詳細資訊表s)
                .HasForeignKey(d => d.店家id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t訂餐_訂單詳細資訊表_t訂餐_店家資料表");

            entity.HasOne(d => d.訂單).WithMany(p => p.T訂餐訂單詳細資訊表s)
                .HasForeignKey(d => d.訂單id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t訂餐_訂單詳細資訊表_t訂單資訊表");

            entity.HasOne(d => d.餐點).WithMany(p => p.T訂餐訂單詳細資訊表s)
                .HasForeignKey(d => d.餐點id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t訂餐_訂單詳細資訊表_t訂餐_餐點資訊表");
        });

        modelBuilder.Entity<T訂餐訂單資訊表>(entity =>
        {
            entity.HasKey(e => e.訂單id).HasName("PK_t訂單資訊表");

            entity.ToTable("t訂餐_訂單資訊表");

            entity.Property(e => e.訂單id).HasColumnName("訂單ID");
            entity.Property(e => e.學員id).HasColumnName("學員ID");
            entity.Property(e => e.支付方式)
                .HasMaxLength(15)
                .IsFixedLength();
            entity.Property(e => e.訂單時間).HasMaxLength(50);
            entity.Property(e => e.訂單狀態)
                .HasMaxLength(15)
                .IsFixedLength();

            entity.HasOne(d => d.學員).WithMany(p => p.T訂餐訂單資訊表s)
                .HasForeignKey(d => d.學員id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t訂單資訊表_t會員_學生");
        });

        modelBuilder.Entity<T訂餐評論表>(entity =>
        {
            entity.HasKey(e => e.評論表id);

            entity.ToTable("t訂餐_評論表");

            entity.Property(e => e.評論表id).HasColumnName("評論表ID");
            entity.Property(e => e.滿意度星數)
                .HasMaxLength(5)
                .IsUnicode(false)
                .IsFixedLength()
                .HasColumnName("滿意度(星數)");
            entity.Property(e => e.訂單id).HasColumnName("訂單ID");
            entity.Property(e => e.評論).HasMaxLength(50);

            entity.HasOne(d => d.訂單).WithMany(p => p.T訂餐評論表s)
                .HasForeignKey(d => d.訂單id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t訂餐_評論表_t訂單資訊表");
        });

        modelBuilder.Entity<T訂餐購物車>(entity =>
        {
            entity.HasKey(e => e.購物車id);

            entity.ToTable("t訂餐_購物車");

            entity.Property(e => e.購物車id).HasColumnName("購物車ID");
            entity.Property(e => e.學員id).HasColumnName("學員ID");
            entity.Property(e => e.店家id).HasColumnName("店家ID");
            entity.Property(e => e.狀態)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.金額小記).HasColumnType("money");
            entity.Property(e => e.餐點id).HasColumnName("餐點ID");

            entity.HasOne(d => d.學員).WithMany(p => p.T訂餐購物車s)
                .HasForeignKey(d => d.學員id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t訂餐_購物車_t會員_學生");

            entity.HasOne(d => d.店家).WithMany(p => p.T訂餐購物車s)
                .HasForeignKey(d => d.店家id)
                .HasConstraintName("FK_t訂餐_購物車_t訂餐_店家資料表");

            entity.HasOne(d => d.餐點).WithMany(p => p.T訂餐購物車s)
                .HasForeignKey(d => d.餐點id)
                .HasConstraintName("FK_t訂餐_購物車_t訂餐_餐點資訊表");
        });

        modelBuilder.Entity<T訂餐餐點資訊表>(entity =>
        {
            entity.HasKey(e => e.餐點id);

            entity.ToTable("t訂餐_餐點資訊表");

            entity.Property(e => e.餐點id).HasColumnName("餐點ID");
            entity.Property(e => e.上架)
                .HasMaxLength(10)
                .IsFixedLength();
            entity.Property(e => e.店家id).HasColumnName("店家ID");
            entity.Property(e => e.餐點名稱).HasMaxLength(50);
            entity.Property(e => e.餐點定價).HasColumnType("money");
            entity.Property(e => e.餐點描述).HasMaxLength(50);

            entity.HasOne(d => d.店家).WithMany(p => p.T訂餐餐點資訊表s)
                .HasForeignKey(d => d.店家id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t訂餐_餐點資訊表_t訂餐_店家資料表");
        });

        modelBuilder.Entity<T討論子版>(entity =>
        {
            entity.HasKey(e => e.子版id).HasName("PK_t討論子版");

            entity.ToTable("t討論_子版");

            entity.Property(e => e.子版id).HasColumnName("子版ID");
            entity.Property(e => e.名稱).HasMaxLength(20);
            entity.Property(e => e.看板id).HasColumnName("看板ID");

            entity.HasOne(d => d.看板).WithMany(p => p.T討論子版s)
                .HasForeignKey(d => d.看板id)
                .HasConstraintName("FK_t討論_子版_t討論_看板");
        });

        modelBuilder.Entity<T討論文章>(entity =>
        {
            entity.HasKey(e => e.文章id).HasName("PK_t文章");

            entity.ToTable("t討論_文章");

            entity.Property(e => e.文章id).HasColumnName("文章ID");
            entity.Property(e => e.刪除)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasDefaultValueSql("((0))")
                .IsFixedLength();
            entity.Property(e => e.子版id).HasColumnName("子版ID");
            entity.Property(e => e.學生id).HasColumnName("學生ID");
            entity.Property(e => e.時間).HasMaxLength(50);
            entity.Property(e => e.標題).HasMaxLength(20);
            entity.Property(e => e.看板id).HasColumnName("看板ID");

            entity.HasOne(d => d.子版).WithMany(p => p.T討論文章s)
                .HasForeignKey(d => d.子版id)
                .HasConstraintName("FK_t討論_文章_t討論_子版");

            entity.HasOne(d => d.學生).WithMany(p => p.T討論文章s)
                .HasForeignKey(d => d.學生id)
                .HasConstraintName("FK_t討論_文章_t會員_學生");

            entity.HasOne(d => d.看板).WithMany(p => p.T討論文章s)
                .HasForeignKey(d => d.看板id)
                .HasConstraintName("FK_t討論_文章_t討論_看板");
        });

        modelBuilder.Entity<T討論文章點讚>(entity =>
        {
            entity.ToTable("t討論_文章點讚");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.學生id).HasColumnName("學生ID");
            entity.Property(e => e.文章id).HasColumnName("文章ID");
            entity.Property(e => e.讚or倒讚)
                .HasMaxLength(1)
                .IsFixedLength();

            entity.HasOne(d => d.學生).WithMany(p => p.T討論文章點讚s)
                .HasForeignKey(d => d.學生id)
                .HasConstraintName("FK_t討論_文章點讚_t會員_學生");

            entity.HasOne(d => d.文章).WithMany(p => p.T討論文章點讚s)
                .HasForeignKey(d => d.文章id)
                .HasConstraintName("FK_t文章點讚_t文章");
        });

        modelBuilder.Entity<T討論留言>(entity =>
        {
            entity.HasKey(e => e.留言id).HasName("PK_t留言");

            entity.ToTable("t討論_留言");

            entity.Property(e => e.留言id).HasColumnName("留言ID");
            entity.Property(e => e.內容).HasMaxLength(50);
            entity.Property(e => e.子版id).HasColumnName("子版ID");
            entity.Property(e => e.學生id).HasColumnName("學生ID");
            entity.Property(e => e.文章id).HasColumnName("文章ID");
            entity.Property(e => e.時間).HasColumnType("datetime");
            entity.Property(e => e.看板id).HasColumnName("看板ID");

            entity.HasOne(d => d.子版).WithMany(p => p.T討論留言s)
                .HasForeignKey(d => d.子版id)
                .HasConstraintName("FK_t討論_留言_t討論_子版");

            entity.HasOne(d => d.學生).WithMany(p => p.T討論留言s)
                .HasForeignKey(d => d.學生id)
                .HasConstraintName("FK_t討論_留言_t會員_學生");

            entity.HasOne(d => d.文章).WithMany(p => p.T討論留言s)
                .HasForeignKey(d => d.文章id)
                .HasConstraintName("FK_t討論_留言_t討論_文章");

            entity.HasOne(d => d.看板).WithMany(p => p.T討論留言s)
                .HasForeignKey(d => d.看板id)
                .HasConstraintName("FK_t討論_留言_t討論_看板");
        });

        modelBuilder.Entity<T討論留言點讚>(entity =>
        {
            entity.ToTable("t討論_留言點讚");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.學生id).HasColumnName("學生ID");
            entity.Property(e => e.留言id).HasColumnName("留言ID");
            entity.Property(e => e.讚or倒讚)
                .HasMaxLength(1)
                .IsFixedLength();

            entity.HasOne(d => d.學生).WithMany(p => p.T討論留言點讚s)
                .HasForeignKey(d => d.學生id)
                .HasConstraintName("FK_t討論_留言點讚_t會員_學生");

            entity.HasOne(d => d.留言).WithMany(p => p.T討論留言點讚s)
                .HasForeignKey(d => d.留言id)
                .HasConstraintName("FK_t留言點讚_t留言");
        });

        modelBuilder.Entity<T討論看板>(entity =>
        {
            entity.HasKey(e => e.看板id).HasName("PK_t看板");

            entity.ToTable("t討論_看板");

            entity.Property(e => e.看板id).HasColumnName("看板ID");
            entity.Property(e => e.名稱).HasMaxLength(20);
            entity.Property(e => e.封面圖).HasMaxLength(50);
        });

        modelBuilder.Entity<T課程學生班級>(entity =>
        {
            entity.HasKey(e => e.學生班級id).HasName("PK_學生班級表");

            entity.ToTable("t課程_學生班級");

            entity.Property(e => e.學生班級id).HasColumnName("學生班級ID");
            entity.Property(e => e.學生id).HasColumnName("學生ID");
            entity.Property(e => e.班級id).HasColumnName("班級ID");

            entity.HasOne(d => d.學生).WithMany(p => p.T課程學生班級s)
                .HasForeignKey(d => d.學生id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t課程_學生班級_t會員_學生1");

            entity.HasOne(d => d.班級).WithMany(p => p.T課程學生班級s)
                .HasForeignKey(d => d.班級id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t課程_學生班級_t課程_班級");
        });

        modelBuilder.Entity<T課程班級>(entity =>
        {
            entity.HasKey(e => e.班級id).HasName("PK_班級");

            entity.ToTable("t課程_班級");

            entity.Property(e => e.班級id).HasColumnName("班級ID");
            entity.Property(e => e.入學日期).HasColumnType("datetime");
            entity.Property(e => e.班級名稱)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.班級導師id).HasColumnName("班級導師ID");
            entity.Property(e => e.結訓日期).HasColumnType("datetime");

            entity.HasOne(d => d.班級導師).WithMany(p => p.T課程班級s)
                .HasForeignKey(d => d.班級導師id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t課程_班級_t會員_老師");
        });

        modelBuilder.Entity<T課程班級科目>(entity =>
        {
            entity.HasKey(e => e.班級科目id).HasName("PK_班級科目表");

            entity.ToTable("t課程_班級科目");

            entity.Property(e => e.班級科目id).HasColumnName("班級科目ID");
            entity.Property(e => e.班級id).HasColumnName("班級ID");
            entity.Property(e => e.科目id).HasColumnName("科目ID");
            entity.Property(e => e.網址).HasMaxLength(255);
            entity.Property(e => e.老師id).HasColumnName("老師ID");

            entity.HasOne(d => d.班級).WithMany(p => p.T課程班級科目s)
                .HasForeignKey(d => d.班級id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t課程_班級科目_t課程_班級");

            entity.HasOne(d => d.科目).WithMany(p => p.T課程班級科目s)
                .HasForeignKey(d => d.科目id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t課程_班級科目_t課程_科目");

            entity.HasOne(d => d.老師).WithMany(p => p.T課程班級科目s)
                .HasForeignKey(d => d.老師id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t課程_班級科目_t會員_老師");
        });

        modelBuilder.Entity<T課程科目>(entity =>
        {
            entity.HasKey(e => e.科目id).HasName("PK_課程_1");

            entity.ToTable("t課程_科目");

            entity.Property(e => e.科目id).HasColumnName("科目ID");
            entity.Property(e => e.科目名稱)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.科目類別id).HasColumnName("科目類別ID");

            entity.HasOne(d => d.科目類別).WithMany(p => p.T課程科目s)
                .HasForeignKey(d => d.科目類別id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t課程_科目_t課程_科目分類");
        });

        modelBuilder.Entity<T課程科目分類>(entity =>
        {
            entity.HasKey(e => e.科目類別id);

            entity.ToTable("t課程_科目分類");

            entity.Property(e => e.科目類別id).HasColumnName("科目類別ID");
            entity.Property(e => e.科目類別名稱)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.科目類別封面).HasMaxLength(200);
        });

        modelBuilder.Entity<T課程老師科目>(entity =>
        {
            entity.HasKey(e => e.老師科目id).HasName("PK_可授課表");

            entity.ToTable("t課程_老師科目");

            entity.Property(e => e.老師科目id).HasColumnName("老師科目ID");
            entity.Property(e => e.科目id).HasColumnName("科目ID");
            entity.Property(e => e.老師id).HasColumnName("老師ID");

            entity.HasOne(d => d.科目).WithMany(p => p.T課程老師科目s)
                .HasForeignKey(d => d.科目id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t課程_老師科目_t課程_科目");

            entity.HasOne(d => d.老師).WithMany(p => p.T課程老師科目s)
                .HasForeignKey(d => d.老師id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t課程_老師科目_t會員_老師");
        });

        modelBuilder.Entity<T課程評分>(entity =>
        {
            entity.HasKey(e => e.評分id);

            entity.ToTable("t課程_評分");

            entity.Property(e => e.評分id).HasColumnName("評分ID");
            entity.Property(e => e.評分主表id).HasColumnName("評分主表ID");
            entity.Property(e => e.評分分類)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.評分題目)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.評分主表).WithMany(p => p.T課程評分s)
                .HasForeignKey(d => d.評分主表id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t課程_評分_t課程_評分主表");
        });

        modelBuilder.Entity<T課程評分主表>(entity =>
        {
            entity.HasKey(e => e.評分主表id).HasName("PK_評分主表");

            entity.ToTable("t課程_評分主表");

            entity.Property(e => e.評分主表id).HasColumnName("評分主表ID");
            entity.Property(e => e.學生id).HasColumnName("學生ID");
            entity.Property(e => e.提交時間).HasColumnType("datetime");
            entity.Property(e => e.改進意見)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.班級科目id).HasColumnName("班級科目ID");

            entity.HasOne(d => d.學生).WithMany(p => p.T課程評分主表s)
                .HasForeignKey(d => d.學生id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t課程_評分主表_t會員_學生");

            entity.HasOne(d => d.班級科目).WithMany(p => p.T課程評分主表s)
                .HasForeignKey(d => d.班級科目id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t課程_評分主表_t課程_班級科目");
        });

        modelBuilder.Entity<T課程課程>(entity =>
        {
            entity.HasKey(e => e.課程id);

            entity.ToTable("t課程_課程");

            entity.Property(e => e.課程id).HasColumnName("課程ID");
            entity.Property(e => e.值日生id).HasColumnName("值日生ID");
            entity.Property(e => e.班級科目id).HasColumnName("班級科目ID");
            entity.Property(e => e.結束時間).HasColumnType("datetime");
            entity.Property(e => e.課堂摘要).HasMaxLength(200);
            entity.Property(e => e.開始時間).HasColumnType("datetime");

            entity.HasOne(d => d.班級科目).WithMany(p => p.T課程課程s)
                .HasForeignKey(d => d.班級科目id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_t課程_課程_t課程_班級科目");
        });

        modelBuilder.Entity<T課程通知表>(entity =>
        {
            entity.HasKey(e => e.訊息id);

            entity.ToTable("t課程_通知表");

            entity.Property(e => e.接收者類型)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.時間).HasColumnType("datetime");
            entity.Property(e => e.發送者類型)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .IsFixedLength();
            entity.Property(e => e.發送訊息內容)
                .IsRequired()
                .HasMaxLength(500);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}